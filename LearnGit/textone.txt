1. for the very first we have to create one empty folder
2. then check for "git status" ( it doesn't show main or master branch)
  "git status is the command we are going to run everytime to check the status of repo"
3. because we haven't initialized our repositiory
4. so we have to run "git init" to initialize it
   " git init" is the command run only once at starting of repositiory.

5. after that we have to create files (touch textone.txt is the first empty file is created)
6.  then we need to follow the sequence 
    
    git add --> git commit --> git push

7. "git add ./ " and "git add." - it will add all the files 

8.  "git add textone.txt" it will add only single file.

9. now git commit --> we have to write it git commit -m "description of commit or msg"

    so here -m stands for message and in quotes need to write message

10. if we just write "git commit" or forgot to add -m it will open vim
     
     qa! or esc+:+Q and 

11. now if you haven't see the email or name u have to configure that using commands

12. git config --global user.name "username" // in my case it will because
      git config --global user.name "smita20BCS4643"

13. another is email so git config --global user.email "email@gmail.com"

     git config --global user.email "smitash3011@gmail.com"

14. we can use "git log" command to check the history of all work of commits
        git log --oneline (gives one line result)

15. to get back after using git log press "q" it will get back to pwd(working directory)


16. now the action and command which help to set and configure vs code editior
    git config --global core.editior "code --wait"

    this will help to configure vs code editior and wait for few seconds 


17. .gitignore we have to create this file 
   so "touch .gitignore" 
   this is used to keep safe all the infomartion regarding api keys and variables 

   .gitignore don't track files and folders when we mention it

   in our case before commiting or adding gitignore we have to mention the name

   so in tracking in red color it will show the names
   .env file
   but onces name of .env added in gitignore file it will become hide didn't show there. 


18. when we did config stored username and email how to see that file

   cat .gitconfig


19. Now we are going to learn about the branching 
     "git branch"  -- it will show the which branch are u working right now


20. how to create another branch nav-bar
git branch nav-bar -- it will create new branch named nav-bar

21. how to move from one branch to another
  git checkout nav-bar -- it will change the branch



22. now we learned about switching and created few new files such as index.html nav-bar.html and head section.html

so in main we created index and head-section files
and in nav-bar branch created nav-bar.html file

when we switch 
git checkout main -- it doesn't show the nav-bar file
and in nav-bar it doesn't show index and head section files


23. now in the end commit everything what changes we have made so far
in both branches before merging it

24. merge -- git merge nav-bar
 # make sure u are on correct branch before merge
 # check it using git branch and if not in master or main switch the branch
 # then do the merge operation

 after megre we need to commit it and boom it will merge the branch


25. delete the branch
    git branch -d nav-bar
    it will delete the branch 

26. we had deleted the branch but we made a confilt before which looks like 
editior choices - accept the current change |Accept the incoming change | accept both
<<<<<<<<<< HEAD(current change)
  the change u made first 

=======================
  the change u made 2nd time

  >>>>>>>>>>>>>>>> nav-bar(Incoming change)

  so we simply delete which is not require save it as per our choices
  i do think both were required so i selected accept the both and comitted it.

27. git diff --
  this command tell the difference within same file
  not between two files a and b
  it will show only a , and it shows the version of file in x time and y time

28. when it shows ++++ and ----- it doesn't mean that added and removed 
something 
it means a file  and b file where new modidification shows + in front of it.

29. to check git diff of file 
we have to do some changes in existing file
the git add tfile.format
then git diff file.format
and then git diff --staged 
will show the output.(which changed we had made them )

30 Rebase -
  Main / master branch -- in these two branches it never meant to run this command. 
  it should be run on side branch --it should run from that branch itself not main or master ''

31 we can add and commit in single line using the commands
git commit -am "text"

32. 

  